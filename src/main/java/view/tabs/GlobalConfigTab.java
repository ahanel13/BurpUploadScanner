package view.tabs;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionListener;
import java.lang.reflect.Method;
import java.util.ResourceBundle;

public class GlobalConfigTab {
    public JPanel mainPanel;

    public String getTabName() {
        return tabName;
    }

    public void addSaveButtonListener(ActionListener listener) {
        throttleValue.addActionListener(listener);
    }

    public JTextField getThrottleValue() {
        return throttleValue;
    }

    public JCheckBox getAddToLoggingChkBox() {
        return addToLoggingChkBox;
    }

    public JCheckBox getReplaceFileName() {
        return replaceFileName;
    }

    public JCheckBox getReplaceContentType() {
        return replaceContentType;
    }

    public JCheckBox getReplaceFileSize() {
        return replaceFileSize;
    }

    public JCheckBox getWgetCurlPayloads() {
        return wgetCurlPayloads;
    }

    public JTextField getSleepTime() {
        return sleepTime;
    }

    private final String     tabName = "Global Config";
    private       JPanel     configGroups;
    private       JPanel     moduleOptions;
    private       JPanel     fileFormatOptions;
    private       JPanel     scanningOptions;
    private       JTextField throttleValue;
    private       JPanel     payloadOptions;
    private       JPanel     generalOptions;
    private       JCheckBox  addToLoggingChkBox;
    private       JLabel     throttleTimeLabel;
    private       JButton    resetBtn;
    private       JButton    saveBtn;
    private       JTextField tabDescription;
    private       JPanel     footerButtons;
    private       JCheckBox  replaceFileName;
    private       JCheckBox  replaceContentType;
    private       JCheckBox  replaceFileSize;
    private       JCheckBox  wgetCurlPayloads;
    private       JTextField sleepTime;
    private       JLabel     sleepTimeLabel;

    private void createUIComponents() {
        // TODO: place custom component creation code here
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new BorderLayout(0, 0));
        final JLabel label1 = new JLabel();
        label1.setText("Global Configs");
        mainPanel.add(label1, BorderLayout.NORTH);
        configGroups = new JPanel();
        configGroups.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        configGroups.setMaximumSize(new Dimension(250, 32767));
        mainPanel.add(configGroups, BorderLayout.CENTER);
        moduleOptions = new JPanel();
        moduleOptions.setLayout(new BorderLayout(0, 0));
        configGroups.add(moduleOptions);
        fileFormatOptions = new JPanel();
        fileFormatOptions.setLayout(new BorderLayout(0, 0));
        configGroups.add(fileFormatOptions);
        scanningOptions = new JPanel();
        scanningOptions.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        configGroups.add(scanningOptions);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        panel1.setMinimumSize(new Dimension(250, 40));
        scanningOptions.add(panel1);
        throttleTimeLabel = new JLabel();
        this.$$$loadLabelText$$$(throttleTimeLabel, this.$$$getMessageFromBundle$$$("tabs/globalConfigTab", "default.throttle.time"));
        panel1.add(throttleTimeLabel);
        throttleValue = new JTextField();
        throttleValue.setText("0.0");
        panel1.add(throttleValue);
        replaceFileSize = new JCheckBox();
        replaceFileSize.setHorizontalTextPosition(10);
        replaceFileSize.setSelected(true);
        replaceFileSize.setText("Replace File Size");
        scanningOptions.add(replaceFileSize);
        replaceFileName = new JCheckBox();
        replaceFileName.setHorizontalTextPosition(10);
        replaceFileName.setSelected(true);
        replaceFileName.setText("Replace File Name");
        scanningOptions.add(replaceFileName);
        replaceContentType = new JCheckBox();
        replaceContentType.setHorizontalTextPosition(10);
        replaceContentType.setSelected(true);
        replaceContentType.setText("Replace Content Type");
        scanningOptions.add(replaceContentType);
        payloadOptions = new JPanel();
        payloadOptions.setLayout(new BorderLayout(0, 0));
        configGroups.add(payloadOptions);
        wgetCurlPayloads = new JCheckBox();
        wgetCurlPayloads.setHorizontalTextPosition(10);
        wgetCurlPayloads.setText("Send wget  Curl Payloads");
        wgetCurlPayloads.setMnemonic(' ');
        wgetCurlPayloads.setDisplayedMnemonicIndex(10);
        payloadOptions.add(wgetCurlPayloads, BorderLayout.CENTER);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        payloadOptions.add(panel2, BorderLayout.WEST);
        sleepTimeLabel = new JLabel();
        this.$$$loadLabelText$$$(sleepTimeLabel, this.$$$getMessageFromBundle$$$("tabs/globalConfigTab", "sleep.time.used.in.rce.payloads"));
        panel2.add(sleepTimeLabel);
        sleepTime = new JTextField();
        sleepTime.setText("6.0");
        panel2.add(sleepTime);
        generalOptions = new JPanel();
        generalOptions.setLayout(new BorderLayout(0, 0));
        configGroups.add(generalOptions);
        addToLoggingChkBox = new JCheckBox();
        addToLoggingChkBox.setHorizontalTextPosition(10);
        addToLoggingChkBox.setSelected(true);
        this.$$$loadButtonText$$$(addToLoggingChkBox, this.$$$getMessageFromBundle$$$("tabs/globalConfigTab", "add.to.logging.tab"));
        generalOptions.add(addToLoggingChkBox, BorderLayout.CENTER);
        footerButtons = new JPanel();
        footerButtons.setLayout(new FlowLayout(FlowLayout.RIGHT, 5, 5));
        mainPanel.add(footerButtons, BorderLayout.SOUTH);
        resetBtn = new JButton();
        resetBtn.setText("Reset");
        footerButtons.add(resetBtn);
        saveBtn = new JButton();
        saveBtn.setText("Save");
        footerButtons.add(saveBtn);
        tabDescription = new JTextField();
        tabDescription.setEditable(false);
        tabDescription.setText(this.$$$getMessageFromBundle$$$("tabs/globalConfigTab", "these.configuration.options.are.used.when.a.new.scan.is.created.once.the.configurations.for.that.scan.has.been.made.those.supercede.the.gloabl.options"));
        mainPanel.add(tabDescription, BorderLayout.WEST);
        label1.setLabelFor(tabDescription);
        throttleTimeLabel.setLabelFor(throttleValue);
    }

    private static Method $$$cachedGetBundleMethod$$$ = null;

    private String $$$getMessageFromBundle$$$(String path, String key) {
        ResourceBundle bundle;
        try {
            Class<?> thisClass = this.getClass();
            if ($$$cachedGetBundleMethod$$$ == null) {
                Class<?> dynamicBundleClass = thisClass.getClassLoader().loadClass("com.intellij.DynamicBundle");
                $$$cachedGetBundleMethod$$$ = dynamicBundleClass.getMethod("getBundle", String.class, Class.class);
            }
            bundle = (ResourceBundle) $$$cachedGetBundleMethod$$$.invoke(null, path, thisClass);
        } catch (Exception e) {
            bundle = ResourceBundle.getBundle(path);
        }
        return bundle.getString(key);
    }

    /**
     * @noinspection ALL
     */
    private void $$$loadLabelText$$$(JLabel component, String text) {
        StringBuffer result        = new StringBuffer();
        boolean      haveMnemonic  = false;
        char         mnemonic      = '\0';
        int          mnemonicIndex = -1;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == '&') {
                i++;
                if (i == text.length()) break;
                if (!haveMnemonic && text.charAt(i) != '&') {
                    haveMnemonic  = true;
                    mnemonic      = text.charAt(i);
                    mnemonicIndex = result.length();
                }
            }
            result.append(text.charAt(i));
        }
        component.setText(result.toString());
        if (haveMnemonic) {
            component.setDisplayedMnemonic(mnemonic);
            component.setDisplayedMnemonicIndex(mnemonicIndex);
        }
    }

    /**
     * @noinspection ALL
     */
    private void $$$loadButtonText$$$(AbstractButton component, String text) {
        StringBuffer result        = new StringBuffer();
        boolean      haveMnemonic  = false;
        char         mnemonic      = '\0';
        int          mnemonicIndex = -1;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == '&') {
                i++;
                if (i == text.length()) break;
                if (!haveMnemonic && text.charAt(i) != '&') {
                    haveMnemonic  = true;
                    mnemonic      = text.charAt(i);
                    mnemonicIndex = result.length();
                }
            }
            result.append(text.charAt(i));
        }
        component.setText(result.toString());
        if (haveMnemonic) {
            component.setMnemonic(mnemonic);
            component.setDisplayedMnemonicIndex(mnemonicIndex);
        }
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

}
